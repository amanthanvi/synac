name: CI

permissions:
  contents: read

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      NODE_ENV: production
      CI: true
      COMMIT_SHA: ${{ github.sha }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: 22.x
          cache: npm

      - run: NODE_ENV='' npm ci --ignore-scripts

      - run: npm run typecheck
      - run: npm run lint -- --max-warnings=0
      - run: npm run build

      # Enforce Lighthouse budgets (source of truth: lighthouse/budgets.json)
      - name: Check Lighthouse budgets
        run: npm run lh:preview

      - name: Upload Lighthouse preview artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-preview
          path: |
            lighthouse/*.json
            lighthouse/*.html
            .lighthouse/**

      - name: Verify security headers and /healthz
        env:
          PORT: 8787
          COMMIT_SHA: ${{ github.sha }}
        run: |
          set -euo pipefail
          echo "Starting production server on :${PORT} ..."
          (PORT=${PORT} NODE_ENV=production COMMIT_SHA="${COMMIT_SHA}" node server.mjs >server.log 2>&1 & echo $! > server.pid)
          PID=$(cat server.pid)
          echo "PID=${PID}"
          echo "Waiting for http://localhost:${PORT}/healthz ..."
          for i in $(seq 1 30); do
            if curl -fsS "http://localhost:${PORT}/healthz" >/dev/null; then
              echo "Server is up"
              break
            fi
            sleep 1
            if [ "$i" -eq 30 ]; then
              echo "Server did not start in time" >&2
              kill "${PID}" || true
              exit 1
            fi
          done

          # Capture headers for /
          curl -sS -D headers.txt -o /dev/null "http://localhost:${PORT}/"

          # Assert CSP present and strict
          grep -iq "^content-security-policy:" headers.txt
          if grep -iq "unsafe-inline" headers.txt; then
            echo "CSP must not include unsafe-inline" >&2
            exit 1
          fi
          if grep -iq "unsafe-eval" headers.txt; then
            echo "CSP must not include unsafe-eval" >&2
            exit 1
          fi
          grep -iq "frame-ancestors 'none'" headers.txt || grep -iq "frame-ancestors[[:space:]]*'none'" headers.txt

          # Other headers
          grep -iq "^referrer-policy:.*strict-origin-when-cross-origin" headers.txt
          grep -iq "^x-content-type-options:.*nosniff" headers.txt
          grep -iq "^x-frame-options:.*DENY" headers.txt
          grep -iq "^permissions-policy:" headers.txt
          grep -iq "^cross-origin-opener-policy:.*same-origin" headers.txt
          grep -iq "^cross-origin-resource-policy:.*same-origin" headers.txt

          # HSTS: not required over HTTP locally; warn if present
          if grep -iq "^strict-transport-security:" headers.txt; then
            echo "Note: HSTS present over HTTP (acceptable)."
          fi

          # HEAD /healthz
          curl -sS -I "http://localhost:${PORT}/healthz" | tee healthz-headers.txt
          grep -iq "^HTTP/.* 200" healthz-headers.txt
          grep -iq "^cache-control:.*no-store" healthz-headers.txt

          # GET /healthz
          curl -sS "http://localhost:${PORT}/healthz" | tee healthz.json
          grep -q '"status"[[:space:]]*:[[:space:]]*"ok"' healthz.json
          grep -q '"commitSha"[[:space:]]*:' healthz.json

          # Stop server
          kill "${PID}" || true

      - name: Upload server header artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: server-headers
          path: |
            headers.txt
            healthz-headers.txt
            healthz.json
            server.log

      - run: npx playwright install --with-deps
      - run: npm run test:offline
