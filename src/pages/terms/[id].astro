---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getCollection, getEntry } from 'astro:content';

export async function getStaticPaths() {
  const terms = await getCollection('terms');
  return terms.map((t) => ({ params: { id: t.slug } }));
}

const { id } = Astro.params;
if (!id) throw new Error('Missing term id');

const entry = await getEntry('terms', id);
if (!entry) throw new Error(`Term not found: ${id}`);

const { Content } = await entry.render();
const data = entry.data as any;

function badgeClass(kind: string) {
  switch (kind) {
    case 'NIST':
      return 'badge badge--nist';
    case 'RFC':
      return 'badge badge--rfc';
    case 'ATTACK':
      return 'badge badge--attack';
    case 'CWE':
      return 'badge badge--cwe';
    case 'CAPEC':
      return 'badge badge--capec';
    default:
      return 'badge badge--other';
  }
}

function tokenize(s: string) {
  return new Set(
    (s || '')
      .toLowerCase()
      .split(/[^a-z0-9]+/g)
      .filter((t) => t && t.length > 2),
  );
}
function jaccard(a: Set<string>, b: Set<string>) {
  if (!a.size && !b.size) return 1;
  let inter = 0;
  for (const t of a) if (b.has(t)) inter++;
  const union = a.size + b.size - inter;
  return union ? inter / union : 0;
}
function computeMinSimilarity(texts: string[]) {
  const sets = texts.map(tokenize);
  let min = 1;
  for (let i = 0; i < sets.length; i++) {
    for (let j = i + 1; j < sets.length; j++) {
      const s = jaccard(sets[i], sets[j]);
      if (s < min) min = s;
    }
  }
  return min;
}

const sourceTexts: string[] = (data.sources || [])
  .map((s: any) => (s.excerpt || s.citation || '').toString())
  .filter(Boolean);

const showDifferences =
  Array.isArray(sourceTexts) && sourceTexts.length >= 2 && computeMinSimilarity(sourceTexts) < 0.6;
---

<BaseLayout title={`SynAc â€” ${data.term}`}>
  <article>
    <header class="section" style="margin-top:0;">
      <h1 style="margin: 0 0 var(--space-2) 0;">{data.term}</h1>
      {
        data.acronym && data.acronym.length ? (
          <p style="margin: 0; color: var(--color-muted);">
            {data.acronym.map((a: string) => (
              <span class="badge badge--muted" title={`Acronym: ${a}`}>
                {a}
              </span>
            ))}
          </p>
        ) : null
      }
      <p style="margin-top: var(--space-4);">{data.summary}</p>
      {
        data.tags?.length ? (
          <p style="margin-top: var(--space-2); color: var(--color-muted);">
            {data.tags.map((t: string) => (
              <span style="margin-right:.5rem;">#{t}</span>
            ))}
          </p>
        ) : null
      }
      <p style="margin-top: var(--space-2); color: var(--color-muted); font-size: .9em;">
        Last updated: {data.updatedAt}
      </p>
    </header>

    {
      showDifferences ? (
        <section aria-labelledby="differences" class="section">
          <h2 id="differences">Differences across sources</h2>
          <div class="callout">
            Parallel sources use distinct terminology or emphasize different aspects. Review each
            citation to understand scope and normative intent.
          </div>
        </section>
      ) : null
    }

    <section aria-labelledby="sources" class="section">
      <h2 id="sources">Sources</h2>
      <div class="grid grid--2">
        {
          (data.sources || []).map((s: any) => (
            <div class="card">
              <div style="display:flex; align-items:center; gap:.5rem; margin-bottom: .5rem;">
                <span
                  class={badgeClass(String(s.kind))}
                  aria-label={`Source kind: ${s.kind}`}
                  title={`Source kind: ${s.kind}`}
                >
                  {s.kind}
                </span>
                <strong>{s.citation}</strong>
                {s.date ? (
                  <span style="color:var(--color-muted); font-size:.9em;">({s.date})</span>
                ) : null}
                {s.normative ? (
                  <span class="badge badge--muted" title="Normative definition">
                    normative
                  </span>
                ) : null}
              </div>
              {s.excerpt ? <p style="margin:.25rem 0 .5rem 0;">{s.excerpt}</p> : null}
              <a class="link" href={s.url} rel="noreferrer">
                View source
              </a>
            </div>
          ))
        }
      </div>
    </section>

    {
      data.mappings ? (
        <section aria-labelledby="mappings" class="section">
          <h2 id="mappings">Mappings</h2>
          <div class="kv">
            {data.mappings.attack ? (
              <>
                {data.mappings.attack.tactic ? (
                  <span class="badge badge--attack" title="ATT&CK tactic">
                    ATT&CK tactic: {data.mappings.attack.tactic}
                  </span>
                ) : null}
                {data.mappings.attack.techniqueIds?.length
                  ? data.mappings.attack.techniqueIds.map((tid: string) => (
                      <span class="badge badge--attack" title={`ATT&CK technique ${tid}`}>
                        {tid}
                      </span>
                    ))
                  : null}
              </>
            ) : null}
            {data.mappings.cweIds?.length
              ? data.mappings.cweIds.map((cid: string) => (
                  <span class="badge badge--cwe" title={`CWE ${cid}`}>
                    {cid}
                  </span>
                ))
              : null}
            {data.mappings.capecIds?.length
              ? data.mappings.capecIds.map((cid: string) => (
                  <span class="badge badge--capec" title={`CAPEC ${cid}`}>
                    {cid}
                  </span>
                ))
              : null}
            {data.mappings.examDomains?.length
              ? data.mappings.examDomains.map((ed: string) => (
                  <span class="badge badge--muted" title="Exam domain">
                    {ed}
                  </span>
                ))
              : null}
          </div>
        </section>
      ) : null
    }

    {
      data.examples?.length ? (
        <section aria-labelledby="examples" class="section">
          <h2 id="examples">Examples</h2>
          {data.examples.map((ex: any) => (
            <div class="card">
              <h3 style="margin:.25rem 0 .25rem 0;">{ex.heading}</h3>
              <p style="margin:0;">{ex.body}</p>
            </div>
          ))}
        </section>
      ) : null
    }

    <section aria-labelledby="more" class="section">
      <h2 id="more">More context</h2>
      <Content />
    </section>

    {
      data.seeAlso?.length ? (
        <section aria-labelledby="seealso" class="section">
          <h2 id="seealso">See also</h2>
          <ul>
            {data.seeAlso.map((sid: string) => (
              <li>
                <a class="link" href={`/terms/${sid}`}>
                  {sid}
                </a>
              </li>
            ))}
          </ul>
        </section>
      ) : null
    }
  </article>
</BaseLayout>
