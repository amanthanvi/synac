---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getCollection, getEntry } from 'astro:content';
import type { TermEntry } from '../../types/term';
import { SIMILARITY_THRESHOLD } from '../../lib/constants';
import { citation } from '../../lib/citation';
import { computeMinSimilarity } from '../../lib/similarity';

export async function getStaticPaths() {
  const terms = await getCollection('terms');
  return terms.map((t) => ({ params: { id: t.slug } }));
}

const { id } = Astro.params;
if (!id) throw new Error('Missing term id');

const entry = await getEntry('terms', id);
if (!entry) throw new Error(`Term not found: ${id}`);

const { Content } = await entry.render();
const data = entry.data as TermEntry;

function badgeClass(kind: string) {
  switch (kind) {
    case 'NIST':
      return 'badge badge--nist';
    case 'RFC':
      return 'badge badge--rfc';
    case 'ATTACK':
      return 'badge badge--attack';
    case 'CWE':
      return 'badge badge--cwe';
    case 'CAPEC':
      return 'badge badge--capec';
    default:
      return 'badge badge--other';
  }
}

const sourceTexts: string[] = (data.sources || [])
  .map((s: any) => (s.excerpt || s.citation || '').toString())
  .filter(Boolean);

const showDifferences =
  Array.isArray(sourceTexts) &&
  sourceTexts.length >= 2 &&
  computeMinSimilarity(sourceTexts) < SIMILARITY_THRESHOLD;
---

<BaseLayout title={`SynAc â€” ${data.term}`}>
  <article>
    <script type="application/ld+json" src={`/terms/${id}.jsonld`}></script>
    <header class="section mt-0">
      <h1 class="m-0 mb-2">{data.term}</h1>
      {
        data.acronym && data.acronym.length ? (
          <p class="m-0 muted">
            {data.acronym.map((a: string) => (
              <span class="badge badge--muted" title={`Acronym: ${a}`}>
                {a}
              </span>
            ))}
          </p>
        ) : null
      }
      <p class="mt-4">{data.summary}</p>
      {
        data.tags?.length ? (
          <p class="mt-2 muted">
            {data.tags.map((t: string) => (
              <span class="mr-2">#{t}</span>
            ))}
          </p>
        ) : null
      }
      <p class="mt-2 muted fs-90">
        Last updated: {data.updatedAt}
      </p>
    </header>

    {
      showDifferences ? (
        <section aria-labelledby="differences" class="section">
          <h2 id="differences">Differences across sources</h2>
          <div class="callout">
            Parallel sources use distinct terminology or emphasize different aspects. Review each
            citation to understand scope and normative intent.
          </div>
        </section>
      ) : null
    }

    <section aria-labelledby="evidence-heading" class="section">
      <h2 id="evidence-heading">Evidence</h2>
      <div class="kv mt-2">
        {
          Array.isArray(data.sources) && data.sources.length > 1 ? (
            <button
              type="button"
              class="btn"
              data-cite-all
              data-cite-text={citation.buildCitations(data.sources as any)}
            >
              Copy all citations
            </button>
          ) : null
        }
        <div data-cite-live aria-live="polite" class="sr-only"></div>
      </div>
      <div class="grid grid--2 mt-2">
        {
          (data.sources || []).map((s: any) => {
            const _type = s && s.normative ? 'Normative' : 'Informative';
            let host = '';
            try {
              host = new URL(String(s.url)).hostname;
            } catch {}
            return (
              <div class="card">
                <div class="flex items-center gap-2 mb-2">
                  <span
                    class={badgeClass(String(s.kind))}
                    aria-label={`Source kind: ${s.kind}`}
                    title={`Source kind: ${s.kind}`}
                  >
                    {s.kind}
                  </span>
                  <strong>{s.citation}</strong>
                  {s.date ? <span class="muted fs-90">({s.date})</span> : null}
                  <span class="badge badge--muted" title={`${_type} definition`}>
                    <span aria-hidden="true">{_type}</span>
                    <span class="sr-only" role="status">
                      {_type} evidence
                    </span>
                  </span>
                </div>
                {s.excerpt ? <p class="mt-1 mb-2">{s.excerpt}</p> : null}
                <div class="kv">
                  <a
                    class="link"
                    href={s.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    referrerpolicy="no-referrer"
                  >
                    {host || 'View source'}
                  </a>
                  <button
                    type="button"
                    class="btn"
                    data-cite
                    data-cite-text={citation.buildCitation(s as any)}
                  >
                    Copy citation
                  </button>
                </div>
              </div>
            );
          })
        }
      </div>
      <script type="module" src="/src/scripts/copyCitation.ts"></script>
    </section>

    {
      data.mappings ? (
        <section aria-labelledby="mappings" class="section">
          <h2 id="mappings">Mappings</h2>
          <div class="kv">
            {data.mappings.attack ? (
              <>
                {data.mappings.attack.tactic ? (
                  <span class="badge badge--attack" title="ATT&CK tactic">
                    ATT&CK tactic: {data.mappings.attack.tactic}
                  </span>
                ) : null}
                {data.mappings.attack.techniqueIds?.length
                  ? data.mappings.attack.techniqueIds.map((tid: string) => (
                      <span class="badge badge--attack" title={`ATT&CK technique ${tid}`}>
                        {tid}
                      </span>
                    ))
                  : null}
              </>
            ) : null}
            {data.mappings.cweIds?.length
              ? data.mappings.cweIds.map((cid: string) => (
                  <span class="badge badge--cwe" title={`CWE ${cid}`}>
                    {cid}
                  </span>
                ))
              : null}
            {data.mappings.capecIds?.length
              ? data.mappings.capecIds.map((cid: string) => (
                  <span class="badge badge--capec" title={`CAPEC ${cid}`}>
                    {cid}
                  </span>
                ))
              : null}
            {data.mappings.examDomains?.length
              ? data.mappings.examDomains.map((ed: string) => (
                  <span class="badge badge--muted" title="Exam domain">
                    {ed}
                  </span>
                ))
              : null}
          </div>
        </section>
      ) : null
    }

    {
      data.examples?.length ? (
        <section aria-labelledby="examples" class="section">
          <h2 id="examples">Examples</h2>
          {data.examples.map((ex: any) => (
            <div class="card">
              <h3 class="my-1">{ex.heading}</h3>
              <p class="m-0">{ex.body}</p>
            </div>
          ))}
        </section>
      ) : null
    }

    <section aria-labelledby="more" class="section">
      <h2 id="more">More context</h2>
      <Content />
    </section>

    {
      Array.isArray((data as any).oftenConfusedWith) && (data as any).oftenConfusedWith.length ? (
        <section aria-labelledby="confused" class="section">
          <h2 id="confused">Often confused with</h2>
          <ul>
            {(data as any).oftenConfusedWith.map((sid: string) => (
              <li>
                <a class="link" href={`/terms/${sid}`}>
                  {sid}
                </a>
              </li>
            ))}
          </ul>
        </section>
      ) : null
    }

    {
      data.seeAlso?.length ? (
        <section aria-labelledby="seealso" class="section">
          <h2 id="seealso">See also</h2>
          <ul>
            {data.seeAlso.map((sid: string) => (
              <li>
                <a class="link" href={`/terms/${sid}`}>
                  {sid}
                </a>
              </li>
            ))}
          </ul>
        </section>
      ) : null
    }
  </article>
</BaseLayout>
